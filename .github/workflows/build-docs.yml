name: Build and deploy CLML schema docs

on:
  push

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check oXygen licence key is configured
        # grep -P allows us to use full PCRE regex syntax with grep and -z means grep
        # treats \0 (NULL) as a newline character, thereby treating the whole string
        # as one long "line" so we can match the pattern against all lines.
        env:
          OXYGEN_LICENCE_KEY: ${{ secrets.OXYGEN_LICENCE_KEY }}
          REPO_URL: https://github.com/${{ github.repository }}
        run: |
          if ! (
            echo "$OXYGEN_LICENCE_KEY" |
            grep -P -z -q '(?s)^\s*-{6}START-LICENSE-KEY-{6}.+?Component=Oxygen-Scripting.+-{7}END-LICENSE-KEY-{7}\s*$'
          ); then
            echo "::error::There is not a valid oXygen licence key configured for this repository. Please go to " \
                 "${REPO_URL}/settings/secrets/actions and create a repository secret called OXYGEN_LICENCE_KEY, then " \
                 "paste in as the value the full text (all 9 lines) of a valid oXygen Scripting 2-core licence key."
            exit 1
          fi
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # recommended by setup-java maintainers
          java-version: '17' # same as version usually bundled with oXygen 25.1
      - name: Download oXygen XML v25.1
        # v25.1 is the most recent we can get with our 2022-issue oXygen licence key
        # SyncRO Soft may stop hosting it at some point, in which case we'll need to
        # host it ourselves somewhere (there)
        run: curl "https://archives.oxygenxml.com/Oxygen/Editor/InstData25.1/All/oxygen.tar.gz" -o "oxygen.tar.gz"
      - name: Extract oXygen
        # We exclude the samples and templates as we don't need them and excluding them
        # speeds up extraction time slightly. We could probably exclude more folders.
        run: |
          tar \
          --exclude='oxygen/{samples,templates}/' \
          --exclude='oxygen/frameworks/*/templates/' \
          --exclude='oxygen/frameworks/{daisy,dita,docbook,jats,ocf,ooxml,tei,xliff}/' \
          -xzvf oxygen.tar.gz
      - name: Install oXygen Scripting licence key
        # Save the licence key to the path expected by oXygen
        env:
          OXYGEN_LICENCE_KEY: ${{ secrets.OXYGEN_LICENCE_KEY }}
        run: echo "$OXYGEN_LICENCE_KEY" > oxygen/scriptinglicensekey.txt
      - name: Check out CLML schema
        uses: actions/checkout@v3
        with:
          path: clml-schema # Check out this repo to the dir clml-schema
      - name: Check out CLML schema documentation generator
        uses: actions/checkout@v3
        with:
          repository: 'legislation/clml-schema-documentation-generator'
          ref: 'feature/tna-enhancements'
          path: generator # Check out the doc generator repo to the dir generator
      - name: Configure transformation scenario
        # Configure the following paths in the include oXygen project settings file:
        # %%SCHEMA%% - the local path to the CLML schema repository
        # %%GENERATOR%% - the local path to the CLML schema doc generator repository
        # %%TEMP%% - a temporary directory
        # %%OXYGEN%% - the local path to your oXygen XML install
        # %%OUTPUT_DIR%% - the local path to the directory to which to save the output
        env:
          TEMP_DIR: ${{ runner.temp }} # runner.temp is a fresh temp dir for this job
        run: |
          sed -i -r \
            -e "s#%%SCHEMA%%#${GITHUB_WORKSPACE}/clml-schema#g" \
            -e "s#%%GENERATOR%%#${GITHUB_WORKSPACE}/generator#g" \
            -e "s#%%TEMP%%#${TEMP_DIR}#g" \
            -e "s#%%OXYGEN%%#${GITHUB_WORKSPACE}/oxygen#g" \
            -e "s#%%OUTPUT_DIR%%#${GITHUB_WORKSPACE}/finalOutput#g" \
            -e "s#file:([A-Za-z]):/#file:/\1:/#g" \
            "${GITHUB_WORKSPACE}/clml-schema/schemaDoc/schemaDoc.xpr"
      - name: Run schema documentation generator transform
        # transform.sh returns a zero error status on sucess and failure, which means GitHub
        # Actions will decide that the task has succeeded even when it's actually failed. To
        # detect success we instead run grep -q against the output to look for the success
        # message and return success/failure depending on whether or not it finds that
        # message. We use tee to pipe to stderr and grep simultaneously so we can both see
        # the transform logs and also allow grep to search them.
        run: |
          "${GITHUB_WORKSPACE}/oxygen/scripts/transform.sh" -v \
             -i "${GITHUB_WORKSPACE}/generator/schemaDocAutomator/generateSchemaDoc.xpl" \
             -sn generateSchemaDoc \
             -s "${GITHUB_WORKSPACE}/clml-schema/schemaDoc/schemaDoc.xpr" 2>&1 | \
          tee /dev/stderr | grep -q 'Transformation successful.'
      - name: Upload Pages artifact
        # This packages up the contents of the output dir finalOutput/ and uploads it as an
        # artifact and uploads it for use by actions/deploy-pages (see below).
        uses: actions/upload-pages-artifact@v2
        with:
          path: 'finalOutput/'

  deploy:
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to allow this job to upload to Pages
      id-token: write # to allow job to prove it *should* be allowed to upload to Pages
    
    environment:
      # NB: The environment needs to be configured to allow deployment from whichever
      # branch we're curently pushing to for CLML schema docs, check the settings at
      # https://github.com/legislation/clml-schema/settings/environments
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # The URL of the deployed Pages site

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        # Deploy the Pages artifact created by actions/upload-pages-artifact above.
        id: deployment
        uses: actions/deploy-pages@v2
